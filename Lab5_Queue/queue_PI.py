import randomimport simpy# ******************************************************************************# Constants# ******************************************************************************LOAD = 0.85  # load of the queueSERVICE = 10 # av service timeARRIVAL = SERVICE/LOAD # av. inter-arrival timeTYPE1 = 1 # At the beginning all clients are of the same type, TYPE1 LAMBDA = 1/ARRIVALMU = 1/SERVICESIM_TIME = 500000 # condition to stop the simulationexp_arrival_time = False# ******************************************************************************# To take the measurements## Collect# - total number of arrivals# - total numnber of departures# - integral of the number of client in time# - store the time of the last event (for computing the integral)# - total delay in the queue # ******************************************************************************class Measure:	def __init__(self,Narr,Ndep,NAveraegUser,OldTimeEvent,AverageDelay):		self.arr = Narr		self.dep = Ndep		self.ut = NAveraegUser		self.oldT = OldTimeEvent		self.delay = AverageDelay	# ******************************************************************************# Client# # Identify the client with# - type: for future use# - time of arrival (for computing the delay, i.e., time in the queue)# ******************************************************************************class Client:	def __init__(self,type,arrival_time):		self.type = type		self.arrival_time = arrival_timedef GetServiceTime():	if(exp_arrival_time):		service_time = random.expovariate(MU)	else:		service_time = 1/MU #random.uniform(a=0,b=1/MU)	return service_time# ******************************************************************************# Process for the client arrivals# # Receive in input # - the evnironment (simpy)# - the queue of the clients# ******************************************************************************def arrival_process(environment,queue):	global users		while True:		# cumulate statistics 		data.arr += 1		data.ut += users*(environment.now-data.oldT)		data.oldT = environment.now				# update the state variable, by increasing the no. of clients by 1		users += 1				# create a record for the client		client = Client(TYPE1,environment.now)		# insert the record in the queue		queue.append(client)		# sample the time until the next arrival       		inter_arrival = random.expovariate(LAMBDA)					if users == 1: 			service_time = GetServiceTime()			env.process(departure_process(env, service_time,queue))					# yield to the next arrival		yield environment.timeout(inter_arrival)		# the execution flow will resume here		# when the "timeout" event is executed by the "environment" 		# after a simulated time equal to inter_arrival# ******************************************************************************# Process for a client departure# # Receive in input # - the evnironment (simpy)# - the service time# - the queue of the clients# ******************************************************************************# ******************************************************************************def departure_process(environment, service_time, queue):	global users	# yield to the end of service	yield environment.timeout(service_time)	# the execution flow will resume here	# when the "timeout" event is executed by the "environment" 	# after a simulated time equal to service_time	# get the first element from the queue	client=queue.pop()		# cumulate statistics    	data.dep += 1	data.ut += users*(environment.now-data.oldT)	data.oldT = environment.now	data.delay += (environment.now-client.arrival_time)	# update the state variable, by decreasing the no. of clients by 1	users -= 1	# check whether there are more clients to in the queue	if users>0: 		service_time = GetServiceTime()		env.process(departure_process(env, service_time,queue))		# generate a new process for the client that starts a service		 # ******************************************************************************# ******************************************************************************# Initialization# ******************************************************************************##arrivals=0# State variable: number of usersusers=0  # the simulation time time = 0# Queue of the clientsqueue=[]  # Collect measurementsdata = Measure(0,0,0,0,0)# Initialize the random number generator    random.seed(42)# create the environmentenv = simpy.Environment()# start the arrival processesenv.process(arrival_process(env, queue))# simulate until SIM_TIMEenv.run(until=SIM_TIME)# ******************************************************************************# Print outputs# ******************************************************************************#Coefficient of variation squared C^2_sif(exp_arrival_time):	coef_variation = 1else:	coef_variation = 0# lambda/mu = LOADro = LAMBDA/MUprint("\n\n\n","*"*10,"  MEASUREMENTS  ","*"*10,"\n")print("No. of users in the queue at the end of the simulation:",users,\		"\nTot. no. of arrivals =",data.arr,"- Tot. no. of departures =",data.dep)print("Actual queue size: ",len(queue))if len(queue)>0:	print("Arrival time of the last element in the queue:",queue[-1].arrival_time)print("\n\nLoad: ",LOAD)print("Nominal arrival rate: ",LAMBDA)print("Measured arrival rate",data.arr/env.now,"\nMeasured departure rate: ",data.dep/env.now)#Theoretical time spent in the queuetheorical_queue_time = ro * ( 1 + ro * (1+coef_variation)/(2*(1-ro)) ) #(LAMBDA)/(MU-LAMBDA)#print("\n\nAverage number of users\nTheorical: ", theorical_queue_time,"  -  Empirical: ",data.ut/env.now)print("\n\nTime spent in the queue\nTheorical: ", theorical_queue_time,"  -  Empirical: ",data.ut/env.now)#Theoretical time spent in the systemtheorical_system_time = 1/MU * ( 1 + ro * (1+coef_variation)/(2*(1-ro)) ) #1.0/(MU-LAMBDA)#print("Average delay \nTheorical= ",theorical_system_time,"  -  Empirical: ",data.delay/data.dep)print("Time spent in the system \nTheorical= ",theorical_system_time,"  -  Empirical: ",data.delay/data.dep)#print("Average delay \nTheorical= ",theorical_system_time,"  -  Empirical: ",data.delay/data.dep)print("Time spent in the service \nTheorical= ",theorical_system_time-theorical_queue_time,"  -  Empirical: ",data.delay/data.dep-data.ut/env.now)print("\n","*"*40)	